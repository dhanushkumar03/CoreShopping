using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Core.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Authorization;
using Core_Web_API.Models;
using Core_Web_API.Repository;
using Core_Web_API.Models.ProductModels;
using PagedList;

namespace Core.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    
    public class AdminController : ControllerBase
    {
        private readonly ApplicationContext _context;
        private readonly IWebHostEnvironment webHostEnvironment;
        public AdminController(ApplicationContext context, IWebHostEnvironment hostEnvironment )
        {
            _context = context;
            webHostEnvironment = hostEnvironment;
         
        }

        [HttpGet("index")]
        public async Task<IActionResult> Index()
        {
            return Ok(_context.Products != null ?
                        await _context.Products.ToListAsync() :
                        Problem("Entity set 'ApplicationContext.Products'  is null."));
        }



        [HttpPost("create")]
        public async Task<IActionResult> Create(Product product)
        {
            if (product != null)
            {
                Product p = new Product 
                { 
                    Name = product.Name,
                    ProductImage = product.ProductImage,
                    Price = product.Price,
                    Description = product.Description,
                    Quantity = product.Quantity,
                };
                _context.Products.Add(p);
                await _context.SaveChangesAsync();
                return Ok();
            }
            return BadRequest();
        }

        [HttpPut("edit")]
        public async Task<IActionResult> Edit(int id, Product product)
        {
            if(product != null)
            {
                Product p = await _context.Products.Where(x => x.Id == id).FirstOrDefaultAsync();
                if (p != null)
                {
                    p.Name = product.Name;
                    p.ProductImage = product.ProductImage;
                    p.Price = product.Price;
                    p.Description = product.Description;
                    p.Quantity = product.Quantity;
                    await _context.SaveChangesAsync();
                    return Ok(p);
                }
                return NotFound();
            }
            return BadRequest();
        }

        [HttpDelete("delete")]
        public async Task<IActionResult> Delete(int id)
        {
            if(id != null)
            {
                Product p = await _context.Products.Where(x => x.Id == id).FirstOrDefaultAsync();
                _context.Products.Remove(p);
                await _context.SaveChangesAsync();
                return Ok(p);
            }
            return BadRequest();
        }

        [HttpGet("getbyid")]
        public async Task<IActionResult> GetById(int? id)
        {
            Product p = new Product();
            if(id != null)
            {
                Product product = await _context.Products.Where(x=>x.Id == id).FirstOrDefaultAsync();
                if (product != null)
                {
                    p = product;
                    return Ok(p);
                }
            }
            return BadRequest(p);
        }

        

    }
}
